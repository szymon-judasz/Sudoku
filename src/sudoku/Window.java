package sudoku;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.BevelBorder;

/**
 *
 * @author Z500User
 */
public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Window
     */
    public Window() {
        //initComponents();
        MyCanva canva = new MyCanva();

        canva.setBackground(new java.awt.Color(255, 255, 255));
        canva.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        
        canva.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                canva.clickHandler(evt);
                repaint();
            }
        });
        String str = JOptionPane.showInputDialog(this, "Wybierz poziom (0-2)", null);
        if(str == null){
            return;
        }
        canva.setGameState(new GameState.GameCreator().createGameState(GameStateCatalog.get(Integer.parseInt(str))));
        this.setContentPane(canva);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sudoku");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Window().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    class MyCanva extends JPanel
    {
        private GameState state;
        public MyCanva() {
            setPreferredSize(new Dimension(400, 400));
        }
        public void setGameState(GameState state)
        {
            this.state = state;
            setPreferredSize(new Dimension(state.x * 100, state.y * 100));
        }
        
        @Override
        public void paintComponent(Graphics g)
        {
            System.out.println("painting");
           super.paintComponent(g);
            drawBoard(g);
            if(state != null)
            {
                
            }
            
        }
        
        void drawBoard(Graphics g){
            g.clearRect(0, 0, 300, 300);
            drawGrid(g);
            state.horizontal.stream().forEach((group) -> {
                group.cells.stream().forEach((cell) -> {
                    drawCell(g, cell);
                });
            });

        }
        void drawGrid(Graphics g){
            for(int i = 1; i < state.x; i++)
                g.drawLine(100*i, 0, 100*i, 100*state.y);
            
            for(int i = 1; i < state.y; i++)
                g.drawLine(0, 100*i, 100*state.x, 100*i);
            
            state.groupList.stream().forEach((group) -> {
                drawGroupBorder(g, group);
            });
        }
        void drawGroupBorder(Graphics g, Group group){
            int[][] arrayH = new int[state.x][state.y+1];
            for (int[] arrayH1 : arrayH) 
                for (int j = 0; j < arrayH1.length; j++) 
                    arrayH1[j] = 1;
            
            int[][] arrayV = new int[state.x+1][state.y];
            for (int[] arrayV1 : arrayV)
                for (int j = 0; j < arrayV1.length; j++) 
                    arrayV1[j] = 1;
            
            group.cells.stream().map((cell) -> {
                arrayH[cell.getX()][cell.getY()] *= -1;
                return cell;
            }).map((cell) -> {
                arrayH[cell.getX()][cell.getY()+1] *= -1;
                return cell;
            }).map((cell) -> {
                arrayV[cell.getX()][cell.getY()] *= -1;
                return cell;
            }).forEach((cell) -> {
                arrayV[cell.getX()+1][cell.getY()] *= -1;
            });
            
            for(int i = 0; i < arrayH.length; i++)
                for(int j = 1; j < arrayH[i].length - 1; j++)
                    if(arrayH[i][j] == -1) 
                        g.fillRect(100*i, j*100 - 2, 100, 4); 
            
            for(int i = 1; i < arrayV.length - 1; i++)
                for(int j = 0; j < arrayV[i].length; j++)
                    if(arrayV[i][j] == -1)
                        g.fillRect(100*i - 2, j*100, 4, 100); 
        }
        void drawCell(Graphics g, Cell c){
            g.clearRect(c.getX() * 100 + 10, c.getY() * 100 + 10, 80, 80);
            if(c.getValue() == 0)
                return;
            g.setColor(Color.red);
            if (c.isConflict())
                g.fillRect(c.getX() * 100 + 10, c.getY() * 100 + 60, 80, 20);
            g.setColor(Color.BLACK);
            g.drawString(Integer.toString(c.getValue()), c.getX() * 100 + 45, c.getY() * 100 + 45);
        }
        
        void clickHandler(MouseEvent evt)
        {
            int mousex = evt.getX();
            int mousey = evt.getY();
            int cellx = mousex / 100;
            int celly = mousey / 100;
        
            String str = JOptionPane.showInputDialog(this, "Wprowadz liczbe. 0 kasuje.", null);
            if(str == null)
                return;
            int newint;
            try {
                newint = Integer.parseInt(str);
            } catch (NumberFormatException e) {
                return;
            }
            Cell cell = state.findCell(cellx, celly);
            try {
                cell.setValue(newint);
                cell.setValue(0);
                cell.removeAllConflictingCells();
                cell.setValue(newint);
            } catch (PropertyVetoException ex) {
            }
        }
    }

}
